Inside the dockerfile.dev we are going to create an image
In order to run a file that is not named docker.dev we run the command
sudo docker build -f NameOfFile .
We can delete node modules because we have two copies of them. When the image is created we run npm install which installs node modules
Delete node modules and run build again. After that we are going to build our container 
sudo docker run id_of_image
When we then visit localhost:3000 there will be an error. 
In order to access it we have to run sudo docker run -p port_on_our_machine:port_in_docker_container id_of_image

sudo docker run -p 3000:3000 e6c2cd015b2b3cea0a1d63659ab939c586e0f77b268b902dd7f2b7415dd80ff9 
Now we can visit localhost:3000

The problem we have now is if we change something in our source code, that is react app. 
Then we would have to build our image each time

How is our Dockerfile.dev actually working? 

1.This command builds an initial image
FROM node:16-alpine 

5. creates a directory app in Docker container so we have /app - /src 
                                                               - /public   

The problem occures here because src and public are snapshots made at a specific time. So when we change something in our local folder
those changes are not going to appear inside the docker container. Somehow we have to avoid doing a strait copy                                                            
For that we are going to use docker volume, so instead of copying actual files we are placing a reference
WORKDIR '/app'

2. We copy everything we have in package.json
COPY package.json .

3. Install dependecies
RUN npm install

4. We copy everything we have in our working directory into 5.
COPY . . 

CMD ["npm", "run", "start"]

For that we are runing a comand

This is the command for volumes:

sudo docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app id